{"version":3,"sources":["elements/title/Title.jsx","containers/header/Header.jsx","components/weather/Weather.jsx","containers/footer/Footer.jsx","elements/paragraph/Paragraph.jsx","elements/subtitle/Subtitle.jsx","components/article/Article.jsx","components/articles/Articles.jsx","elements/image/Image.jsx","elements/math/Math.jsx","components/post/Post.jsx","components/posts/Posts.jsx","components/exchangeRates/Element.jsx","components/exchangeRates/ExchangeRates.jsx","containers/main/Main.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Title","props","text","Header","useState","isBlackTheme","setIsBlackTheme","onClickHandler","useCallback","document","body","className","to","onClick","Weather","main","setMain","name","setName","units","setUnits","unitsSymbol","setUnitsSymbol","useEffect","navigator","geolocation","getCurrentPosition","position","url","coords","latitude","longitude","fetch","then","response","json","temp","Footer","href","Paragraph","Subtitle","id","anchor","Article","data","header","meta","summury","date","path","articles","Articles","map","articleData","key","uuid","v1","Image","src","alt","Math","Post","element","posts","Posts","postData","render","Element","type","value","onChange","event","inputOnChange","target","selectOnChange","select","rates","rate","index","Cur_Abbreviation","ExchangeRates","values","setValues","selects","setSelects","setRates","array","push","Cur_ID","Date","toISOString","Cur_Scale","Cur_Name","Cur_OfficialRate","console","log","convert","money","curr","next","toFixed","Main","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","basename","process","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b5acfbe.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Title.css\";\n\nfunction Title(props) {\n  return <h1>{props.text}</h1>;\n}\n\nexport default Title;\n","import React, { useState, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Header.css\";\n\nimport Title from \"../../elements/title/Title\";\n\nconst Header = () => {\n  const [isBlackTheme, setIsBlackTheme] = useState(false);\n\n  const onClickHandler = useCallback(() => {\n    if (isBlackTheme) {\n      document.body.className = \"black\";\n    } else {\n      document.body.className = \"white\";\n    }\n\n    setIsBlackTheme(!isBlackTheme);\n  }, [isBlackTheme, setIsBlackTheme]);\n\n  return (\n    <header>\n      <Link to=\"/\">\n        <Title text={\"Blog about everything!\"} />\n      </Link>\n      <div>\n        <button onClick={onClickHandler}>\n          {isBlackTheme ? \"Black\" : \"White\"}\n        </button>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./Weather.css\";\n\nconst WEATHER_API_KEY = \"7cd1581792cb7fa3710cd45312c6415e\";\n\nconst Weather = () => {\n  const [main, setMain] = useState(\"0\");\n  const [name, setName] = useState(\"City\");\n  const [units, setUnits] = useState(\"metric\");\n  const [unitsSymbol, setUnitsSymbol] = useState(\"C\");\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const url =\n        `https://api.openweathermap.org/data/2.5/weather?` +\n        `lat=${position.coords.latitude}&` +\n        `lon=${position.coords.longitude}&` +\n        `units=${units}&` +\n        `appid=${WEATHER_API_KEY}`;\n\n      fetch(url)\n        .then(response => response.json())\n        .then(json => {\n          setMain(json.main);\n          setName(json.name);\n        });\n    });\n  }, [units]);\n\n  const unitsOnClick = () => {\n    if (units === \"metric\") {\n      setUnits(\"imperial\");\n      setUnitsSymbol(\"F\");\n    } else if (units === \"imperial\") {\n      setUnits(\"standart\");\n      setUnitsSymbol(\"K\");\n    } else {\n      setUnits(\"metric\");\n      setUnitsSymbol(\"C\");\n    }\n  };\n\n  return (\n    <section>\n      <p className=\"weather\">\n        {`${name}: ${main.temp}˚`}\n        <span onClick={unitsOnClick}>{unitsSymbol}</span>\n      </p>\n    </section>\n  );\n};\n\nexport default Weather;\n","import React from \"react\";\n\nimport \"./Footer.css\";\nimport Weather from \"../../components/weather/Weather\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <div>\n        <a href=\"https://twitter.com/antoinesolovyov\">Twitter</a>\n        {\" • \"}\n        <a href=\"https://www.instagram.com/antoinesolovyov/\">Instagram</a>\n        {\" • \"}\n        <a href=\"https://github.com/antoinesolovyov/\">GitHub</a>\n      </div>\n\n      <Weather />\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nimport \"./Paragraph.css\";\n\nfunction Paragraph(props) {\n  return <p>{props.text}</p>;\n}\n\nexport default Paragraph;\n","import React from \"react\";\n\nimport \"./Subtitle.css\";\n\nfunction Subtitle(props) {\n  return <h2 id={props.anchor}>{props.text}</h2>;\n}\n\nexport default Subtitle;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Article.css\";\n\nimport Paragraph from \"../../elements/paragraph/Paragraph\";\nimport Subtitle from \"../../elements/subtitle/Subtitle\";\n\nconst Article = props => {\n  const { header, meta, summury, date, path } = props.data;\n\n  return (\n    <article>\n      <Link to={`/articles/${path}`}>\n        <Subtitle text={header} />\n      </Link>\n      <Paragraph text={date + \" • \" + meta} />\n      <Paragraph text={summury} />\n    </article>\n  );\n};\n\nexport default Article;\n","import React from \"react\";\nimport uuid from \"uuid\";\n\nimport Article from \"../article/Article\";\n\nlet articles = [\n  {\n    header: \"Neuron\",\n    meta: \"4 min read\",\n    summury:\n      \"A neuron (also called neurone or nerve cell) is a cell that carries electrical impulses. Neurons are the basic (functional and structural) units of our nervous system.\",\n    url: \"imgs/neuron.png\",\n    date: \"November 14, 2019\",\n    path: \"neuron\"\n  },\n  {\n    header: \"Artificial neural network\",\n    meta: \"9 min read\",\n    summury:\n      \"Artificial neural networks (ANN) or connectionist systems are computing systems vaguely inspired by the biological neural networks that constitute animal brains.\",\n    url: \"imgs/NeuralNetwork.png\",\n    date: \"October 23, 2019\",\n    path: \"artificial_neural_network\"\n  },\n  {\n    header: \"Convolutional neural network\",\n    meta: \"7 min read\",\n    summury:\n      \"In deep learning, a convolutional neural network (CNN, or ConvNet) is a class of deep neural networks, most commonly applied to analyzing visual imagery.\",\n    url: \"imgs/cnn.png\",\n    date: \"October 12, 2019\",\n    path: \"convolutional_neural_network\"\n  }\n];\n\nconst Articles = () => {\n  const getArticles = () => {\n    return articles.map(articleData => <Article key={uuid.v1()} data={articleData} />);\n  };\n\n  return <section>{getArticles()}</section>;\n};\n\nexport default Articles;\n","import React from \"react\";\n\nimport \"./Image.css\";\n\nfunction Image(props) {\n  return <img src={props.url} alt={props.alt} />;\n}\n\nexport default Image;\n","import React from \"react\";\n\n//import \"./Math.css\";\n\nfunction Math(props) {\n  return <math>{props.text}</math>;\n}\n\nexport default Math;\n","import React from \"react\";\n\nimport \"./Post.css\";\n\nimport Title from \"../../elements/title/Title\";\nimport Subtitle from \"../../elements/subtitle/Subtitle\";\nimport Paragraph from \"../../elements/paragraph/Paragraph\";\nimport Image from \"../../elements/image/Image\";\nimport Math from \"../../elements/math/Math\";\nimport uuid from \"uuid\";\n\nfunction getPost(post) {\n  return post.map(element => {\n    switch (element[0]) {\n      case \"title\":\n        return <Title key={uuid.v1()} text={element[1]} />;\n\n      case \"subtitle\":\n        return (\n          <Subtitle key={uuid.v1()} text={element[1]} anchor={element[2]} />\n        );\n\n      case \"paragraph\":\n        return <Paragraph key={uuid.v1()} text={element[1]} />;\n\n      case \"image\":\n        if (typeof element[1] === \"string\") {\n          return <Image key={uuid.v1()} url={element[1]} alt={element[2]} />;\n        } else {\n          return element[1];\n        }\n\n      case \"math\":\n        return <Math key={uuid.v1()} text={element[1]} />;\n    }\n  });\n}\n\nconst Post = props => {\n  return getPost(props.data);\n};\n\nexport default Post;\n","import React from \"react\";\nimport uuid from \"uuid\";\n\nimport { Route } from \"react-router-dom\";\n\nimport Post from \"../post/Post\";\n\nconst posts = [\n  [\n    [\"neuron\"],\n    [\"title\", \"Neuron\"],\n    [\n      \"paragraph\",\n      \"Элементами полносвязного слоя являются искусственные нейроны\"\n    ],\n    [\"image\", \"../imgs/neuron.png\", \"alt\"],\n    [\n      \"paragraph\",\n      \"Математически нейрон представляет собой взвешенный сумматор, единственный выход которого определяется через его входы и матрицу весов.\"\n    ]\n  ],\n  [\n    [\"artificial_neural_network\"],\n    [\"title\", \"Artificial neural network\"],\n    [\n      \"paragraph\",\n      \"После нескольких прохождений свёртки изображения и уплотнения с помощью пулинга система перестраивается от конкретной сетки пикселей с высоким разрешением к более абстрактным картам признаков, как правило, на каждом следующем слое увеличивается число каналов и уменьшается размерность изображения в каждом канале. В итоге остаётся большой набор каналов, хранящих небольшое число данных, которые интерпретируются как абстрактные понятия, выявленные из исходного изображения.\"\n    ],\n    [\n      \"paragraph\",\n      \"Эти данные объединяются и передаются на нейронную сеть, которая также может состоять из нескольких слоёв. При этом слои уже утрачивают пространственную структуру и обладают сравнительно небольшой размерностью. На рисунке 1.4 схематически изображён пример данного слоя.\"\n    ],\n    [\"image\", \"../imgs/Perceptron.png\", \"perceptron\"],\n    [\n      \"paragraph\",\n      \"На данном рисунке  – данные, переданные после операций свёртки и субдискретизации,  – коэффициент смещения функции активации,  – выходные значения. В свёрточной нейронной сети таких слоёв может быть несколько (рисунок 1.5), в таком случае выходные сигналы одного слоя передаются на вход другому, пока слои данного типа не заканчиваются, после чего результат подаётся на выход.\"\n    ],\n    [\"image\", \"../imgs/NeuralNetwork.png\", \"perceptron\"]\n  ],\n  [\n    [\"convolutional_neural_network\"],\n    [\"title\", \"Convolutional neural network\"],\n    [\n      \"paragraph\",\n      \"С появлением больших объемов данных и больших вычислительных возможностей стали активно использоваться нейронные сети. Проблема использования нейронных сетей для распознавания образов изображений – это высокая размерность изображений. С полносвязными нейронными сетями это приводит к огромному количеству обучаемых параметров. Кроме того, данные нейронные сети не используют естественную структуру изображений, например, высокую корреляцию соседних пикселей и повторяющиеся узоры. Решением данных проблем стала СНС.\"\n    ],\n    [\n      \"paragraph\",\n      \"Своё название архитектура сети получила из-за наличия операции свёртки, суть которой заключается в том, что каждый фрагмент изображения умножается на матрицу (ядро) свёртки поэлементно, а результат суммируется и записывается в аналогичную позицию выходного изображения.\"\n    ],\n    [\n      \"paragraph\",\n      \"Сверточная нейронная сеть обычно представляет собой чередование свёрточных слоев, слоёв субдискретизации и полносвязных слоев на выходе [8].\"\n    ],\n    [\n      \"paragraph\",\n      \"В свёрточном слое нейроны, которые используют одни и те же веса, объединяются в карты признаков, а каждый нейрон карты признаков связан с частью нейронов предыдущего слоя. При вычислении сети получается, что каждый нейрон выполняет свертку некоторой области предыдущего слоя (определяемой множеством нейронов, связанных с данным нейроном). Пример архитектуры свёрточной нейронной сети представлен на рисунке.\"\n    ],\n    [\"image\", \"../imgs/cnn.png\", \"alt\"],\n    [\n      \"paragraph\",\n      \"Архитектуру свёрточных нейронных сетей можно определить с точки зрения количества слоев и количества карт функций на слой. К сожалению, существуют только эмпирические правила выбора этих параметров. Необходимо выбрать дополнительные параметры, такие как размер шага и фильтра в свёрточных слоях, размер пула, коэффициент отсева и тип функции активации, создавая огромное пространство параметров. Таким образом, практический анализ обучения СНС является актуальной проблемой.\"\n    ],\n    [\"subtitle\", \"Свёрточный слой\", \"convolutional_layer\"],\n    [\n      \"paragraph\",\n      \"Операция свертки, дающая СНС их имя, определяется как сумма поэлементных произведений двух матриц, тогда как одна из них рассматривается как ядро или фильтр , который применяется к другой матрице , как определено в следующем уравнении:\"\n    ],\n    [\"math\", \"Math Formula\"],\n    [\"paragraph\", \"Пример операции свёртки представлен на рисунке 1.2.\"],\n    [\"image\", \"../imgs/Convolution.svg\", \"convolution\"],\n    [\n      \"paragraph\",\n      \"В отличие от полносвязного, в данном слое нейрон соединен лишь с ограниченным количеством нейронов предыдущего уровня, то есть свёрточный слой аналогичен применению операции свёртки, где используется матрица весов небольшого размера (ядро свертки), которую «двигают» по всему слою. Особенностью же свёрточного слоя является небольшое количество параметров, устанавливаемое при обучении.\"\n    ],\n    [\"subtitle\", \"Слой пулинга\", \"pooling_layer\"],\n    [\n      \"paragraph\",\n      \"Слои субдискретизации (пулинга) уменьшают размеры карт признаков. Преобразования затрагивают непересекающиеся квадраты, которые ужимаются в один пиксель, при этом выбирается пиксель, имеющий максимальное значение. Пулинг существенно уменьшает пространственный объём изображения, а фильтрация ненужных деталей помогает не переобучаться. Операции пулинга представлен на рисунке 1.3.\"\n    ],\n    [\"image\", \"../imgs/Pooling.svg\"],\n    [\n      \"paragraph\",\n      \"Субдискретизацию выполняют разными способами, например, его можно использовать с функцией среднего значения или L2-нормирования, однако на практике было доказано, что предпочтительнее использовать субдискретизацию с функцией максимума.\"\n    ]\n  ]\n];\n\nconst Posts = () => {\n  const getPosts = () => {\n    return posts.map(postData => (\n      <Route\n        key={uuid.v1()}\n        path={`/articles/${postData[0]}`}\n        render={() => <Post data={postData} />}\n      />\n    ));\n  };\n\n  return <main>{getPosts()}</main>;\n};\n\nexport default Posts;\n","import React from \"react\";\n\nimport \"./Element.css\";\n\nconst Element = props => {\n\n  const selectOnChange = event => {\n    props.selectOnChange(props.name, event.target.value);\n  };\n\n  const inputOnChange = event => {\n    props.inputOnChange(props.name, event.target.value);\n  };\n\n  function getOptions() {\n    return props.rates.map((rate, index) => (\n      <option key={index} value={index}>\n        {rate.Cur_Abbreviation}\n      </option>\n    ));\n  }\n\n  return (\n    <div className=\"exchange-rates\">\n      <input type=\"number\" value={props.value} onChange={inputOnChange} />\n      <select onChange={selectOnChange} value={props.select}>\n        {getOptions()}\n      </select>\n    </div>\n  );\n};\n\nexport default Element;\n","import React, { useState, useEffect } from \"react\";\n\nimport Element from \"./Element\";\n\nconst ExchangeRates = () => {\n  const [values, setValues] = useState([0, 0]);\n  const [selects, setSelects] = useState([26, 4]);\n\n  const [rates, setRates] = useState([]);\n\n  useEffect(() => {\n    const url = `http://www.nbrb.by/api/exrates/rates?periodicity=0`;\n\n    fetch(url)\n      .then(response => response.json())\n      .then(array => {\n        array.push({\n          Cur_ID: 100,\n          Date: new Date().toISOString(),\n          Cur_Abbreviation: \"BYN\",\n          Cur_Scale: 1,\n          Cur_Name: \"Белорусский рубль\",\n          Cur_OfficialRate: 1\n        });\n        setRates(array);\n        console.log(array);\n      });\n  }, []);\n\n  const inputOnChange = (name, value) => {\n    if (name === \"first\") {\n      setValues([value, convert(value, rates[selects[0]], rates[selects[1]])]);\n    } else {\n      setValues([convert(value, rates[selects[1]], rates[selects[0]]), value]);\n    }\n  };\n\n  const selectOnChange = (name, select) => {\n    if (name === \"first\") {\n      setSelects([select, selects[1]]);\n      setValues([\n        values[0],\n        convert(values[0], rates[select], rates[selects[1]])\n      ]);\n    } else {\n      setSelects([selects[0], select]);\n      setValues([\n        convert(values[1], rates[select], rates[selects[0]]),\n        values[1]\n      ]);\n    }\n  };\n\n  function convert(money, curr, next) {\n    return (\n      (money * curr.Cur_OfficialRate) /\n      next.Cur_OfficialRate /\n      (curr.Cur_Scale / next.Cur_Scale)\n    ).toFixed(2);\n  }\n\n  return (\n    <section>\n      <Element\n        name=\"first\"\n        value={values[0]}\n        select={selects[0]}\n        rates={rates}\n        inputOnChange={inputOnChange}\n        selectOnChange={selectOnChange}\n      />\n\n      <Element\n        name=\"second\"\n        value={values[1]}\n        select={selects[1]}\n        rates={rates}\n        inputOnChange={inputOnChange}\n        selectOnChange={selectOnChange}\n      />\n    </section>\n  );\n};\n\nexport default ExchangeRates;\n","import React from \"react\";\nimport { Route, Link } from \"react-router-dom\";\n\nimport \"./Main.css\";\n\nimport Articles from \"../../components/articles/Articles\";\nimport Posts from \"../../components/posts/Posts\";\nimport Weather from \"../../components/weather/Weather\";\nimport ExchangeRates from \"../../components/exchangeRates/ExchangeRates\";\n\nconst Main = () => {\n  return (\n    <main>\n      <Posts />\n      <Route path=\"/\" exact>\n        <Link to=\"/articles\">articles</Link>\n        <br/>\n        <Link to=\"/weather\">weather</Link>\n        <br/>\n        <Link to=\"/exchange_rates\">exchange-rate</Link>\n      </Route>\n      <Route path=\"/articles\" exact component={Articles} />\n      <Route path=\"/weather\" component={Weather} />\n      <Route path=\"/exchange_rates\" component={ExchangeRates} />\n    </main>\n  );\n};\n\nexport default Main;\n","import React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Header from \"./containers/header/Header\";\nimport Footer from \"./containers/footer/Footer\";\nimport Main from \"./containers/main/Main\";\n\nconst App = () => {\n  useEffect(() => {\n    document.body.className = \"black\";\n  }, []);\n\n  return (\n    <>\n      <Route path=\"/\" exact>\n        <Header />\n      </Route>\n      <Main />\n      <Route path=\"/\" exact>\n        <Footer />\n      </Route>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}